// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                    String                  @id @default(uuid())
  licenseNumber         String
  vehicleType           VehicleType
  homeStation           String
  parcels               Parcel[]
  questInstances        QuestInstance[]
  infraction            Infraction[]
  vehicleConfig         VehicleConf             @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId       String
  IncentivePayStructure IncentivePayStructure[]
  minimumGoal           Int
  country               Country
}

model Parcel {
  trackingNumber String        @id @default(uuid())
  assignedDate   DateTime
  deliveryDate   DateTime?
  size           Size
  recipientName  String
  address        String
  type           DeliveryType
  isCash         Boolean
  driver         Driver        @relation(fields: [driverId], references: [id])
  status         ParcelStatus
  failureReason  FailureReason
  driverId       String
}

model Infraction {
  infractionId String         @id @default(uuid())
  type         InfractionType
  date         DateTime
  driver       Driver         @relation(fields: [driverId], references: [id])
  driverId     String
}

model Quest {
  questId          String          @id @default(uuid())
  title            String
  type             QuestType
  targetPercentage Int?
  targetValue      Int?
  bonusAmount      Float
  questInstances   QuestInstance[]
  countryConfig    CountryConf     @relation(fields: [countryConfigId], references: [countryConfigId])
  countryConfigId  String
  frequency        QuestFreq
}

model QuestInstance {
  questInstanceId String   @id @default(uuid())
  date            DateTime
  driver          Driver   @relation(fields: [driverId], references: [id])
  quest           Quest    @relation(fields: [questId], references: [questId])
  driverId        String
  questId         String
  currentValue    Int?
  isCompleted     Boolean  @default(false)
}

model VehicleConf {
  vehicleConfigId            String                      @id @default(uuid())
  baseSalary                 Int
  sizeBonus                  Float
  cashOnDeliveryBonus        Float
  accessibilityBonus         Float
  priorityBonus              Float
  timeSlotBonus              Float
  drivers                    Driver[]
  country                    Country
  incentivePayStructures     IncentivePayStructure[]
  packageTypeBonusStructures PackageTypeBonusStructure[]
}

model PackageTypeBonusStructure {
  typeBonusId     String           @id @default(uuid())
  vehicleConfig   VehicleConf      @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId String
  packageType     PackageBonusType
  criteria        Int
  bonus           Int

  @@unique([vehicleConfigId, packageType])
}

enum PackageBonusType {
  L_SIZE
  CASH_ON_DELIVERY
  RETURN_PACKAGE
}

model IncentivePayStructure {
  incentivePayId  String      @id @default(uuid())
  vehicleConfig   VehicleConf @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId String
  Driver          Driver?     @relation(fields: [driverId], references: [id])
  driverId        String?
  targetPackages  Int
  bonusPayment    Float
}

model CountryConf {
  country                Country
  countryConfigId        String                   @id @default(uuid())
  quests                 Quest[]
  isInfractionVisible    Boolean                  @default(true)
  InfractionPayStructure InfractionPayStructure[]
}

model InfractionPayStructure {
  id                         String         @id @default(uuid())
  countryConf                CountryConf    @relation(fields: [countryConfCountryConfigId], references: [countryConfigId])
  countryConfigId            String
  infractionType             InfractionType
  deduction                  Float
  countryConfCountryConfigId String
}

enum Country {
  SG
  MY
  TH
  IN
  VN
  PH
}

enum QuestFreq {
  DAILY
  REPEATABLE
}

enum QuestType {
  ATTENDANCE
  SUCCESSFUL
}

enum InfractionType {
  FAKE_FAILURE
  NO_PROOF_OF_RECEIPT
}

enum FailureReason {
  CANNOT_MAKE_IT
  NOT_HOME
}

enum ParcelStatus {
  UNDELIVERED
  ATTEMPTED
  DELIVERED
}

enum Size {
  XS
  S
  M
  L
}

enum DeliveryType {
  CONTACTLESS
  IN_PERSON
  RETURN
  CASH_ON_DELIVERY
}

enum VehicleType {
  VAN
  MOTORCYCLE
  CAR_SEDAN
  CAR_SUV
  LORRY
}
