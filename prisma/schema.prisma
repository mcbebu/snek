// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                    String                  @id @default(uuid())
  licenseNumber         String
  vehicleType           VehicleType
  homeStation           String
  parcels               Parcel[]
  infraction            Infraction[]
  vehicleConfig         VehicleConf             @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId       String
  IncentivePayStructure IncentivePayStructure[]
  minimumGoal           Int
  country               Country
  QuestProgression      QuestProgression[]
}

model Quest {
  id               Int                @id @default(autoincrement())
  bronzeThreshold  Int
  silverThreshold  Int
  goldThreshold    Int
  title            String
  description      String
  QuestProgression QuestProgression[]
}

model QuestProgression {
  quest              Quest  @relation(fields: [questId], references: [id])
  questId            Int
  driver             Driver @relation(fields: [driverId], references: [id])
  driverId           String
  currentProgression Int

  @@id([questId, driverId])
}

model Parcel {
  trackingNumber String         @id @default(uuid())
  assignedDate   DateTime
  deliveryDate   DateTime?
  size           Size
  recipientName  String
  address        String
  type           DeliveryType
  driver         Driver?        @relation(fields: [driverId], references: [id])
  status         ParcelStatus
  failureReason  FailureReason?
  driverId       String?
  isCash         Boolean        @default(false)
}

model Infraction {
  infractionId String         @id @default(uuid())
  type         InfractionType
  date         DateTime
  driver       Driver         @relation(fields: [driverId], references: [id])
  driverId     String
}

model VehicleConf {
  vehicleConfigId            String                      @id @default(uuid())
  baseSalary                 Int
  vehicleType                VehicleType
  drivers                    Driver[]
  countryConfig              CountryConf                 @relation(fields: [countryConfCountryConfigId], references: [countryConfigId])
  country                    Country
  incentivePayStructures     IncentivePayStructure[]
  packageTypeBonusStructures PackageTypeBonusStructure[]
  countryConfCountryConfigId String

  @@unique([vehicleType, country])
}

model PackageTypeBonusStructure {
  typeBonusId     String           @id @default(uuid())
  vehicleConfig   VehicleConf      @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId String
  packageType     PackageBonusType
  bonus           Float

  @@unique([vehicleConfigId, packageType])
}

enum PackageBonusType {
  L_SIZE
  CASH_ON_DELIVERY
  RETURN_PACKAGE
}

model IncentivePayStructure {
  incentivePayId  String      @id @default(uuid())
  vehicleConfig   VehicleConf @relation(fields: [vehicleConfigId], references: [vehicleConfigId])
  vehicleConfigId String
  Driver          Driver?     @relation(fields: [driverId], references: [id])
  driverId        String?
  targetPackages  Int
  bonusPayment    Float
}

model CountryConf {
  country                 Country                  @unique
  countryConfigId         String                   @id @default(uuid())
  isInfractionVisible     Boolean                  @default(true)
  infractionPayStructures InfractionPayStructure[]
  VehicleConf             VehicleConf[]
}

model InfractionPayStructure {
  id              String         @id @default(uuid())
  countryConf     CountryConf    @relation(fields: [countryConfigId], references: [countryConfigId])
  countryConfigId String
  infractionType  InfractionType
  deduction       Float
}

enum Country {
  SG
  MY
  TH
  IN
  VN
  PH
}

enum QuestFreq {
  DAILY
  REPEATABLE
}

enum QuestType {
  ATTENDANCE
  SUCCESSFUL
}

enum InfractionType {
  FAKE_FAILURE
  NO_PROOF_OF_RECEIPT
}

enum FailureReason {
  CANNOT_MAKE_IT
  NOT_HOME
}

enum ParcelStatus {
  UNDELIVERED
  ATTEMPTED
  DELIVERED
}

enum Size {
  XS
  S
  M
  L
}

enum DeliveryType {
  CONTACTLESS
  IN_PERSON
  RETURN
}

enum VehicleType {
  VAN
  MOTORCYCLE
  CAR_SEDAN
  CAR_SUV
  LORRY
}
